.statistics__wrapper{
    position: absolute;
    bottom: 0%;
    display: flex;
    gap: 2rem;
    width: 100%;
    padding: 2rem;
    color: var(--white200);
    background-color: var(--black300);
    transform: translate(0%, 100%);
    transition: var(--transition);

    &--open{
        transform: translate(0%, 0%);

        .statistics__switch {
            &-icon {
                transform: rotate(180deg);
            }
        }
    }

    .statistics__switch {
        position: absolute;
        top: 0;
        left: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--black300);
        padding: 1rem 2rem;
        border-top-right-radius: 3rem;
        border-top-left-radius: 3rem;
        cursor: pointer;
        transform: translate(0%, -90%);

        &-icon {
            color: var(--white200);
            transition: var(--transition);
        }
    }
}

@property --hoursPlayed {
    syntax: '<integer>';
    initial-value: 0;
    inherits: false;
}

@property --minutesPlayed{
    syntax: '<integer>';
    initial-value: 0;
    inherits: false;
}

.statistics{

    &__box{
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        gap: 1rem;
        max-width: 11.2rem;

        &-title{
            color: var(--gray000);
        }
    }

    &__timePlayed{
        display: flex;
        justify-content: center;
        align-items: center;
        width: 8rem;
        height: 8rem;
        padding: 0 0.3rem;
        text-align: center;
        border: 0.4rem solid var(--white200);
        border-radius: 50%;
        counter-reset: hours var(--hoursPlayed) minutes var(--minutesPlayed);
        transition: --hoursPlayed 1000ms ease-out, --minutesPlayed 1500ms ease-out;

        &:after{
            content: counter(hours) "h " counter(minutes) "min"
        }
    }
}

@property --numerator {
    syntax: '<integer>';
    initial-value: 0;
    inherits: false;
}

@property --denominator {
    syntax: '<integer>';
    initial-value: 0;
    inherits: false;
}

@property --percentage {
    syntax: '<integer>';
    initial-value: 0;
    inherits: false;
}

.inner-circle {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    width: 7.2rem;
    height: 7.2rem;
    border-radius: 50%;
    background-color: var(--black300);
    font-size: 1.6rem;
    
    &--percentage {
        transition: --percentage 1000ms ease-out;
        counter-reset: percentage var(--percentage);
        
        &:after {
            content: counter(percentage) "%";
        }
    }

    &--fraction {
        transition: --numerator 1000ms ease-out, --denominator 1000ms ease-out;
        counter-reset: numerator var(--numerator) denominator var(--denominator);

        &:after {
            content: counter(numerator) "/" counter(denominator);
        }
    }

}

@property --angle {
    syntax: '<angle>';
    inherits: false;
    initial-value: 0deg;
}

.circle-border {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    text-align: center;
    width: 8rem;
    height: 8rem;
    border-radius: 50%;
    transition: --angle 1000ms ease-out;

    &:has(.inner-circle--percentage){
        background: conic-gradient(var(--green400) var(--angle), var(--white200) var(--angle));
    }

    &:has(.inner-circle--fraction){
        background: conic-gradient(var(--gold400) var(--angle), var(--white200) var(--angle));
    }
}